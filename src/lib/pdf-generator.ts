import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { format } from 'date-fns';

export interface ReportData {
  title: string;
  period: string;
  dateRange: string;
  generatedAt: string;
  data: any;
}

export class PDFGenerator {
  private doc: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number;
  private currentY: number;

  constructor() {
    this.doc = new jsPDF('p', 'mm', 'a4');
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
    this.margin = 20;
    this.currentY = this.margin;
  }

  // Add Karavan header with logo and branding
  addHeader(title: string, subtitle?: string) {
    // Header background
    this.doc.setFillColor(16, 185, 129); // emerald-600
    this.doc.rect(0, 0, this.pageWidth, 40, 'F');

    // Logo area (simplified text logo for now)
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(24);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('KARAVAN', this.margin, 20);
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text('Layers of Happiness!', this.margin, 28);

    // Report title
    this.doc.setFontSize(18);
    this.doc.setFont('helvetica', 'bold');
    const titleWidth = this.doc.getTextWidth(title);
    this.doc.text(title, this.pageWidth - this.margin - titleWidth, 20);

    if (subtitle) {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'normal');
      const subtitleWidth = this.doc.getTextWidth(subtitle);
      this.doc.text(subtitle, this.pageWidth - this.margin - subtitleWidth, 28);
    }

    this.currentY = 50;
  }

  // Add report metadata section
  addMetadata(reportData: ReportData) {
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Report Information', this.margin, this.currentY);
    
    this.currentY += 10;
    this.doc.setFont('helvetica', 'normal');
    this.doc.setFontSize(10);
    
    const metadata = [
      `Period: ${reportData.period}`,
      `Date Range: ${reportData.dateRange}`,
      `Generated: ${reportData.generatedAt}`,
      `Generated by: Karavan Canteen Management System`
    ];

    metadata.forEach(item => {
      this.doc.text(item, this.margin, this.currentY);
      this.currentY += 6;
    });

    this.currentY += 10;
  }

  // Add section header
  addSectionHeader(title: string) {
    this.checkPageBreak(20);
    
    this.doc.setFillColor(243, 244, 246); // gray-100
    this.doc.rect(this.margin, this.currentY - 5, this.pageWidth - 2 * this.margin, 15, 'F');
    
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin + 5, this.currentY + 5);
    
    this.currentY += 20;
  }

  // Add data table
  addTable(headers: string[], rows: string[][], title?: string) {
    if (title) {
      this.addSectionHeader(title);
    }

    const colWidth = (this.pageWidth - 2 * this.margin) / headers.length;
    const rowHeight = 8;

    // Check if table fits on current page
    const tableHeight = (rows.length + 1) * rowHeight + 10;
    this.checkPageBreak(tableHeight);

    // Table headers
    this.doc.setFillColor(16, 185, 129); // emerald-600
    this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, rowHeight, 'F');
    
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    
    headers.forEach((header, index) => {
      this.doc.text(header, this.margin + index * colWidth + 2, this.currentY + 5);
    });

    this.currentY += rowHeight;

    // Table rows
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFont('helvetica', 'normal');
    
    rows.forEach((row, rowIndex) => {
      // Alternate row colors
      if (rowIndex % 2 === 0) {
        this.doc.setFillColor(249, 250, 251); // gray-50
        this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, rowHeight, 'F');
      }

      row.forEach((cell, colIndex) => {
        this.doc.text(cell, this.margin + colIndex * colWidth + 2, this.currentY + 5);
      });

      this.currentY += rowHeight;
    });

    this.currentY += 10;
  }

  // Add chart from canvas element
  async addChart(chartElement: HTMLCanvasElement, title: string, width: number = 160, height: number = 100) {
    this.addSectionHeader(title);
    
    this.checkPageBreak(height + 20);

    try {
      const canvas = await html2canvas(chartElement, {
        backgroundColor: '#ffffff',
        scale: 2
      });

      const imgData = canvas.toDataURL('image/png');
      const x = (this.pageWidth - width) / 2; // Center the chart
      
      this.doc.addImage(imgData, 'PNG', x, this.currentY, width, height);
      this.currentY += height + 20;
    } catch (error) {
      console.error('Error adding chart to PDF:', error);
      this.doc.text('Chart could not be generated', this.margin, this.currentY);
      this.currentY += 20;
    }
  }

  // Add summary statistics
  addSummaryStats(stats: { label: string; value: string; }[]) {
    this.addSectionHeader('Summary Statistics');
    
    const statsPerRow = 2;
    const statWidth = (this.pageWidth - 2 * this.margin) / statsPerRow;
    
    stats.forEach((stat, index) => {
      const row = Math.floor(index / statsPerRow);
      const col = index % statsPerRow;
      
      const x = this.margin + col * statWidth;
      const y = this.currentY + row * 25;
      
      // Stat box
      this.doc.setFillColor(243, 244, 246); // gray-100
      this.doc.rect(x, y, statWidth - 5, 20, 'F');
      
      // Stat label
      this.doc.setTextColor(75, 85, 99); // gray-600
      this.doc.setFontSize(9);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text(stat.label, x + 5, y + 8);
      
      // Stat value
      this.doc.setTextColor(0, 0, 0);
      this.doc.setFontSize(14);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text(stat.value, x + 5, y + 16);
    });
    
    const rows = Math.ceil(stats.length / statsPerRow);
    this.currentY += rows * 25 + 10;
  }

  // Check if we need a page break
  private checkPageBreak(requiredHeight: number) {
    if (this.currentY + requiredHeight > this.pageHeight - this.margin) {
      this.addPageBreak();
    }
  }

  // Add page break
  private addPageBreak() {
    this.doc.addPage();
    this.currentY = this.margin;
  }

  // Add footer
  addFooter() {
    const pageCount = this.doc.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      
      // Footer line
      this.doc.setDrawColor(229, 231, 235); // gray-200
      this.doc.line(this.margin, this.pageHeight - 15, this.pageWidth - this.margin, this.pageHeight - 15);
      
      // Footer text
      this.doc.setTextColor(107, 114, 128); // gray-500
      this.doc.setFontSize(8);
      this.doc.setFont('helvetica', 'normal');
      
      const footerText = 'Generated by Karavan Canteen Management System';
      this.doc.text(footerText, this.margin, this.pageHeight - 8);
      
      const pageText = `Page ${i} of ${pageCount}`;
      const pageTextWidth = this.doc.getTextWidth(pageText);
      this.doc.text(pageText, this.pageWidth - this.margin - pageTextWidth, this.pageHeight - 8);
    }
  }

  // Generate and download PDF
  download(filename: string) {
    this.addFooter();
    this.doc.save(filename);
  }

  // Get PDF as blob for further processing
  getBlob(): Blob {
    this.addFooter();
    return this.doc.output('blob');
  }
}

// Utility function to format currency
export const formatCurrency = (amount: number | undefined | null): string => {
  const safeAmount = amount || 0;
  return `${safeAmount.toFixed(2)} ETB`;
};

// Utility function to format date
export const formatReportDate = (date: Date): string => {
  return format(date, 'MMM dd, yyyy');
};

// Utility function to format date range
export const formatDateRange = (startDate: Date, endDate: Date): string => {
  return `${formatReportDate(startDate)} - ${formatReportDate(endDate)}`;
};
